@using ContractGenerator.Utilities
@using ContractGenerator.Models
@using Telerik.Windows.Documents.Flow.Model
@using Telerik.Windows.Documents.Flow.Model.Editing
@using Telerik.Windows.Documents.Flow.Model.Styles
@using Telerik.Windows.Documents.Media
@using Telerik.Windows.Documents.Primitives
@using System.Text.Json
@using System.Reflection
@using System.Text.Encodings.Web
@using Telerik.Windows.Documents.Extensibility
@using Telerik.Windows.Documents.Flow.FormatProviders.Docx
@using Telerik.Windows.Documents.Flow.FormatProviders.Pdf
@using Telerik.Documents.ImageUtils
@using Telerik.Documents.Common.Model
@using Telerik.Documents.Core.Fonts
@inject IJSRuntime JS
@inject IAnalytics Analytics
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <div id="documentViewer" style="height: 60vh;">
            <MudSkeleton/>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px"/>
            <MudSkeleton/>
            <MudSkeleton SkeletonType="SkeletonType.Circle" Width="50px" Height="50px"/>
            <MudSkeleton/>
            <MudSkeleton/>
            <MudSkeleton/>
            <MudSkeleton/>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="ExportCB" Underline="MudBlazor.Underline.None">Save as CB</MudButton>
        @if (DOCXBlobHref != null)
        {
            <MudButton Color="Color.Primary" Link="@DOCXBlobHref" download='@string.Concat(conference.Name, " ", contract.FriendlyName, ".docx")' Underline="MudBlazor.Underline.None">Save as DOCX</MudButton>
        }
        @if (PDFBlobHref != null)
        {
            <MudButton Color="Color.Primary" Link="@PDFBlobHref" download='@string.Concat(conference.Name, " ", contract.FriendlyName, ".pdf")' Underline="MudBlazor.Underline.None">Save as PDF</MudButton>
        }
        <MudButton Color="Color.Secondary" OnClick="() => MudDialog.Close(DialogResult.Ok(true))">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ContractBundle cb { get; set; }

    private Company company { get; set; }
    private Conference conference { get; set; }
    private Contract contract { get; set; }
    private string DOCXBlobHref { get; set; }
    private string PDFBlobHref { get; set; }

    protected override async Task OnInitializedAsync()
    {
        MudDialog.Options.MaxWidth = MaxWidth.Medium;
        MudDialog.Options.FullWidth = true;
        MudDialog.SetOptions(MudDialog.Options);

    //Break any references as to not clutter the original contract fields by adding the conference and company ones
        cb = JsonSerializer.Deserialize<ContractBundle>(JsonSerializer.Serialize(cb));

        company = cb.Company;
        conference = cb.Conference;
        contract = cb.Contract;

        var companyProperties = company.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(company) != null).ToList();
        foreach (var p in companyProperties)
        {
            var f = new ContractField();
            f.Name = "Company" + p.Name;
            f.Content = p.GetValue(company).ToString();
            if (contract.Fields == null)
                contract.Fields = new List<ContractField>();
            contract.Fields.Add(f);
        }

        var conferenceProperties = conference.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(conference) != null).ToList();
        foreach (var p in conferenceProperties)
        {
            var f = new ContractField();
            f.Name = "Conference" + p.Name;
            f.Content = p.GetValue(conference).ToString();
            if (contract.Fields == null)
                contract.Fields = new List<ContractField>();
            contract.Fields.Add(f);
        }

        var ContractDateField = new ContractField();
        ContractDateField.Name = "ContractDate";
        ContractDateField.Content = contract.Date;
        contract.Fields.Add(ContractDateField);

        var ContractNumberField = new ContractField();
        ContractNumberField.Name = "ContractNumber";
        ContractNumberField.Content = contract.Number;
        contract.Fields.Add(ContractNumberField);

        await Analytics.TrackEvent("[ExportContract] Initialized ExportContract");

        var doc = await GenerateContract();

        ExportDOCX(doc);
        ExportPDF(doc);
        ShowPreview(doc);
    }

    async Task<RadFlowDocument> GenerateContract()
    {
        Console.WriteLine("Generating contract: " + company.Name + " " + conference.Name + " " + contract.FriendlyName);

        FixedExtensibilityManager.JpegImageConverter = new JpegImageConverter();

        var doc = new RadFlowDocument();
        var editor = new RadFlowDocumentEditor(doc);

        editor.CharacterFormatting.FontFamily.LocalValue = new ThemableFontFamily("Times New Roman");
        editor.CharacterFormatting.FontSize.LocalValue = 12.00 * 4 / 3;
        editor.CharacterFormatting.FontWeight.LocalValue = FontWeights.Normal;
        editor.ParagraphFormatting.TextAlignment.LocalValue = Alignment.Justified;

        var mainSection = editor.InsertSection();
        mainSection.PageMargins = new Padding(48); //Narrow margins

        var logo = await Http.GetStreamAsync(conference.LogoFilePath);

        var headerTable = editor.InsertTable(1, 3);
        var cell1 = headerTable.Rows[0].Cells[0].Blocks.AddParagraph();
        var cell1Img = cell1.Inlines.AddImageInline();
        cell1Img.Image.ImageSource = new ImageSource(logo, conference.LogoFilePath.Substring(conference.LogoFilePath.LastIndexOf('.') + 1));
        cell1Img.Image.Height = 150;
        cell1Img.Image.Width = 150;
        cell1Img.Paragraph.TextAlignment = Alignment.Center;

        var cell2 = headerTable.Rows[0].Cells[1].Blocks.AddParagraph();
        cell2.TextAlignment = Alignment.Center;
        headerTable.Rows[0].Cells[1].Borders = new TableCellBorders(new Border(3, BorderStyle.Single, new ThemableColor(Telerik.Documents.Media.Color.FromRgb(0, 0, 0))));
        editor.MoveToParagraphStart(cell2);
        editor.ParagraphFormatting.TextAlignment.LocalValue = Alignment.Center;
        editor.ParagraphFormatting.SpacingAfter.LocalValue = 0;
        editor.CharacterFormatting.FontSize.LocalValue = 14.00 * 4 / 3;
        editor.InsertLine(company.Name);
        editor.CharacterFormatting.FontSize.LocalValue = 12.00 * 4 / 3;
        editor.CharacterFormatting.FontWeight.LocalValue = FontWeights.Normal;
        editor.InsertLine("CIF: " + company.CIF);
        editor.InsertLine("IBAN: " + company.IBAN + " " + company.BankName);
        editor.InsertLine("SWIFT Code: " + company.SWIFT);
        editor.InsertLine(company.OtherInfoHeader);

        var cell3 = headerTable.Rows[0].Cells[2].Blocks.AddParagraph();
        var cell3Img = cell3.Inlines.AddImageInline();
        cell3Img.Image.ImageSource = new ImageSource(logo, conference.LogoFilePath.Substring(conference.LogoFilePath.LastIndexOf('.') + 1));
        cell3Img.Image.Height = 150;
        cell3Img.Image.Width = 150;
        cell3Img.Paragraph.TextAlignment = Alignment.Center;

        editor.MoveToTableEnd(headerTable);

        editor.InsertLine("");
        editor.CharacterFormatting.FontWeight.LocalValue = FontWeights.Bold;
        editor.ParagraphFormatting.TextAlignment.LocalValue = Alignment.Center;
        editor.InsertLine(contract.Name.ToUpper());
        editor.InsertLine(string.Concat("Nr. ", contract.Number, " / ", contract.Date));
        editor.ParagraphFormatting.TextAlignment.LocalValue = Alignment.Justified;
        editor.ParagraphFormatting.SpacingAfter.ClearValue();

        foreach (var clause in contract.Clauses)
        {
            editor.CharacterFormatting.FontWeight.LocalValue = FontWeights.Bold;
            editor.CharacterFormatting.FontSize.LocalValue = 14.00 * 4 / 3;
            editor.InsertLine(ReplaceFields(clause.Name));

            editor.CharacterFormatting.FontWeight.LocalValue = FontWeights.Normal;
            editor.CharacterFormatting.FontSize.LocalValue = 12.00 * 4 / 3;
            editor.InsertLine(ReplaceFields(clause.Content));
        }
        return doc;
    }

    string ReplaceFields(string content)
    {
        foreach (var field in contract.Fields)
        {
            content = content.Replace("{" + field.Name + "}", field.Content);
        }
        Console.WriteLine(content);
        return content;
    }

    async void ExportDOCX(RadFlowDocument doc)
    {
        using (var stream = new MemoryStream())
        {
            var providerDocx = new DocxFormatProvider();
            providerDocx.Export(doc, stream);

            DOCXBlobHref = JS.GetBlobUrl(stream);
        }
    }

    async void ExportPDF(RadFlowDocument doc)
    {
        using (var stream = new MemoryStream())
        {
            var providerPDF = new PdfFormatProvider();
            providerPDF.Export(doc, stream);

            PDFBlobHref = JS.GetBlobUrl(stream);
        }
    }

    async void ShowPreview(RadFlowDocument doc)
    {
        using (var stream = new MemoryStream())
        {
            var providerPDF = new PdfFormatProvider();
            providerPDF.Export(doc, stream);

            var byteArray = stream.ToArray();
            var base64String = Convert.ToBase64String(byteArray);
            var docPreviewBase64 = "data:application/pdf;base64," + base64String;

            await JS.InvokeVoidAsync("showPdf", docPreviewBase64, "#documentViewer");
        }
    }

    async Task ExportCB()
    {
        var jso = new JsonSerializerOptions();
        jso.WriteIndented = true;
        jso.Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping;

        await JS.InvokeVoidAsync("saveFile",
            string.Concat(conference.Name, " ", contract.FriendlyName, ".cb"),
            JsonSerializer.Serialize(cb, jso).Replace("\\\"", "\"").Trim('"')
            );
    }

}