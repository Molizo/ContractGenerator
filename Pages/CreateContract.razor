@page "/CreateContract"
@using ContractGenerator.Models
@using System.Reflection
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS
@inject Blazor.Analytics.IAnalytics Analytics
@inject IDialogService DialogService

<PageTitle>Create a contract</PageTitle>

<MudText Typo="Typo.h3">Create a contract</MudText>

<MudCard Class="my-5">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Update templates</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudText Class="pb-2">Update your templates to get access to the latest contract types.</MudText>
        <MudAlert Severity="Severity.Warning">Getting the latest templates will erase your custom ones.</MudAlert>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="UpdateDB">Get latest templates from server</MudButton>
    </MudCardActions>
</MudCard>

<MudExpansionPanels Class="my-5">
    <MudExpansionPanel Text="@String.Concat("[Step 1] Select a company",selectedCompany!=null  ? String.Concat(" - ", selectedCompany.Name) : "")">
        @if (companies == null)
            {
                <div class="alert alert-primary" role="alert">
                    Loading...
                </div>
            }
            else
            {

                <MudSelect T="Company" @bind-Value="@selectedCompany" @onchange="OnSelectCompany" Label="Select a company" Variant="Variant.Outlined" ToStringFunc="@companyConverter" AnchorOrigin="Origin.BottomCenter">
                    @foreach(var company in companies)
                    {
                        <MudSelectItem Value="@company" />
                    }
                </MudSelect>

                <MudSwitch @bind-Checked="@customizeCompanyDetails" Label="Customize company details" Color="Color.Info" />

                @if (customizeCompanyDetails && selectedCompany != null)
                {
                    List<PropertyInfo> companyProperties = selectedCompany.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(selectedCompany) != null).ToList();
                
                    <div class="card">
                      <h5 class="card-header">Customize company info for @selectedCompany.Name</h5>
                      <div class="card-body">
                        <p class="card-text">
                            @foreach(var p in companyProperties)
                            {
                                <div class="form-group">
                                    <label>@p.Name</label>
                                    <input value="@p.GetValue(selectedCompany).ToString()" @onchange='(ChangeEventArgs e)=>p.SetValue(selectedCompany, Convert.ChangeType(e.Value, p.PropertyType))' class="form-control">
                                </div>
                            }
                        </p>
                      </div>
                    </div>
                }
            }
    </MudExpansionPanel>
    @if(selectedCompany != null)
    {
    <MudExpansionPanel Text="@String.Concat("[Step 2] Select a conference",selectedConference!=null  ? String.Concat(" - ", selectedConference.Name) : "")">
        @if(conferences == null)
                {
                    <div class="alert alert-primary" role="alert">
                        Loading...
                    </div>
                }
                else
                {
                    <MudSelect T="Conference" @bind-Value="@selectedConference" @onchange="OnSelectConference" Label="Select a conference" Variant="Variant.Outlined" ToStringFunc="@conferenceConverter" AnchorOrigin="Origin.BottomCenter">
                    @foreach(var conference in conferences)
                    {
                        <MudSelectItem Value="@conference" />
                    }
                </MudSelect>


                    
                <MudSwitch @bind-Checked="@customizeConferenceDetails" Label="Customize conference details" Color="Color.Info" />

                    @if (customizeConferenceDetails && selectedConference != null)
                    {
                        List<PropertyInfo> conferenceProperties = selectedConference.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(selectedConference) != null).ToList();
                
                        <div class="card">
                          <h5 class="card-header">Customize conference info for @selectedConference.Name</h5>
                          <div class="card-body">
                            <p class="card-text">
                                @foreach(var p in conferenceProperties)
                                {
                                    <div class="form-group">
                                        <label>@p.Name</label>
                                        <input value="@p.GetValue(selectedConference).ToString()" @onchange='(ChangeEventArgs e)=>p.SetValue(selectedConference, Convert.ChangeType(e.Value, p.PropertyType))' class="form-control">
                                    </div>
                                }
                            </p>
                          </div>
                        </div>
                    }
                }
    </MudExpansionPanel>
    }
    @if(selectedConference != null)
            {
    <MudExpansionPanel Text="@String.Concat("[Step 3] Fill in contract info",selectedContract!=null  ? String.Concat(" - ", selectedContract.FriendlyName) : "")">
        @if(contracts == null)
                {
                    <div class="alert alert-primary" role="alert">
                        Loading...
                    </div>
                }
                else
                {
                    <MudSelect T="Contract" @bind-Value="@selectedContract" @onchange="OnSelectContract" Label="Select a contract" Variant="Variant.Outlined" ToStringFunc="@contractConverter" AnchorOrigin="Origin.BottomCenter">
                    @foreach(var contract in contracts)
                    {
                        <MudSelectItem Value="@contract" />
                    }
                </MudSelect>
                }
                @if(selectedContract != null)
            {

                <MudSwitch @bind-Checked="@addContractNumber" Label="Add contract number" Color="Color.Info" />

                @if (addContractNumber)
                {
                    <div class="form-group">
                        <label>Contract Number</label>
                        <input @bind="@selectedContract.Number" class="form-control">
                    </div>
                }
                
                <MudSwitch @bind-Checked="@addContractDate" Label="Add contract date" Color="Color.Info" />

                @if (addContractDate)
                {
                    <MudDatePicker Date="@selectedContractDateTime" PickerVariant="PickerVariant.Dialog" Label="Contract date" DateFormat="yyyy MMMM dd"/>
                }
                @foreach(var field in selectedContract.Fields)
                {
                    <div class="form-group">
                        <label>@field.Name</label>
                        <input placeholder="@field.Placeholder" @bind="@field.Content" class="form-control">
                    </div>
                }
                }
    </MudExpansionPanel>
            }
            @if(selectedContract != null && selectedContract.Fields.All(f=>f.Content != "")){
            <MudExpansionPanel Text="[Step 4] Preview and export the contract">
                <MudButton Color="Color.Primary" OnClick="PreviewContract">Preview contract</MudButton>
            </MudExpansionPanel>
            }
</MudExpansionPanels>


@code {
    private List<Company> companies;
    private Company selectedCompany;
    private List<Conference> conferences;
    private Conference selectedConference;
    private List<Contract> contracts;
    private Contract selectedContract;
    private bool previewedContract = false;

    private bool addContractNumber = false;
    private bool addContractDate = false;
    private bool customizeCompanyDetails = false;
    private bool customizeConferenceDetails = false;
    private DateTime selectedContractDateTime;

    protected override async Task OnInitializedAsync()
    {
        companies = await localStorage.GetItemAsync<List<Company>>("TemplateCompanies");
        conferences = await localStorage.GetItemAsync<List<Conference>>("TemplateConferences");
        contracts = await localStorage.GetItemAsync<List<Contract>>("TemplateContracts");

        if (companies == null && conferences == null && contracts == null)
            await UpdateDB();

        await Analytics.TrackEvent("[CreateContract] Initialized CreateContract");
    }

    void OnSelectCompany(ChangeEventArgs e)
    {
        selectedConference = null;
        selectedContract = null;

        Analytics.TrackEvent("[CreateContract] Selected a company");
    }

    Func<Company,string> companyConverter = c => c?.Name;

    void OnSelectConference(ChangeEventArgs e)
    {
        selectedContract = null;

        Analytics.TrackEvent("[CreateContract] Selected a conference");
    }

    Func<Conference,string> conferenceConverter = c => c?.Name;

    void OnSelectContract(ChangeEventArgs e)
    {
        selectedContractDateTime = DateTime.Now;
        Analytics.TrackEvent("[CreateContract] Selected a contract");
    }

    Func<Contract,string> contractConverter = c => c?.FriendlyName;

    async Task PreviewContract()
    {
        previewedContract = true;

        if (!addContractNumber)
            selectedContract.Number = "________";
        if (!addContractDate)
            selectedContract.Date = "________________";
        else
            selectedContract.Date = selectedContractDateTime.ToString("yyyy MMMM dd");

        ContractBundle cb = new ContractBundle();
        cb.Company = selectedCompany;
        cb.Conference = selectedConference;
        cb.Contract = selectedContract;
        cb.CreatedAt = DateTime.Now;

        List<ContractBundle> cblist = await localStorage.GetItemAsync<List<ContractBundle>>("ContractBundles");
        if (cblist == null)
            cblist = new List<ContractBundle>();
        cblist.Add(cb);
        await localStorage.SetItemAsync("ContractBundles", cblist);

        var param = new DialogParameters();
        param.Add("cb", cb);
        DialogService.Show<ExportContract>("Preview contract",param);

        await Analytics.TrackEvent("[CreateContract] Previewed a contract");
    }

    async Task UpdateDB()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("Data/companies.json?time=" + DateTime.Now);
        conferences = await Http.GetFromJsonAsync<List<Conference>>("Data/conferences.json?time=" + DateTime.Now);
        contracts = await Http.GetFromJsonAsync<List<Contract>>("Data/contracts.json?time=" + DateTime.Now);
        AppInfo appInfo = await Http.GetFromJsonAsync<AppInfo>("Data/appInfo.json?time=" + DateTime.Now);

        await localStorage.SetItemAsync("TemplateCompanies", companies);
        await localStorage.SetItemAsync("TemplateConferences", conferences);
        await localStorage.SetItemAsync("TemplateContracts", contracts);
        await localStorage.SetItemAsync("TemplateAppInfo", appInfo);

        selectedCompany = null;
        selectedConference = null;
        selectedContract = null;

        await Analytics.TrackEvent("[CreateContract] Updated database");
    }

}