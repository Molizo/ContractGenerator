@page "/CreateContract"
@using ContractGenerator.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

<PageTitle>Create a contract</PageTitle>
<h1>Create a contract</h1>
<hr />

<div class="row mb-5">
    <div class="col-md-6">
        <h5>Step 0 (optional): Update templates</h5>
        <div class="form-group mb-4">
            <div class="alert alert-warning" role="alert">
                Getting the latest templates will erase your custom ones.
            </div>
            <button type="button" class="btn btn-secondary" @onclick="UpdateDB">Get latest templates from server</button>
        </div>
        <h5>Step 1: Choose a company</h5>
        @if (companies == null)
        {
            <div class="alert alert-primary" role="alert">
                Loading...
            </div>
        }
        else
        {
            <div class="form-group mb-4">
                <select class="form-control" @onchange="OnSelectCompany">
                    <option value=''>Select a company</option>
                    @foreach(var company in companies)
                    {
                        <option value='@company.Name'>@company.Name</option>
                    }
                </select>
            </div>
        }

        @if(selectedCompany != null)
        {
            <h5>Step 2: Choose a conference</h5>
            @if(conferences == null)
            {
                <div class="alert alert-primary" role="alert">
                    Loading...
                </div>
            }
            else
            {
                <div class="form-group mb-4">
                    <select class="form-control" @onchange="OnSelectConference">
                        <option value=''>Select a conference</option>
                        @foreach(var conference in conferences)
                        {
                            <option value='@conference.Name'>@conference.Name</option>
                        }
                    </select>
                </div>
            }
        }

        @if(selectedConference != null)
        {
            <h5>Step 3: Choose a contract type</h5>
            @if(contracts == null)
            {
                <div class="alert alert-primary" role="alert">
                    Loading...
                </div>
            }
            else
            {
                <div class="form-group mb-4">
                    <select class="form-control" @onchange="OnSelectContract">
                        <option value=''>Select a contract</option>
                        @foreach(var contract in contracts)
                        {
                            <option value='@contract.FriendlyName'>@contract.FriendlyName</option>
                        }
                    </select>
                </div>
            }
        }
    

        @if(selectedContract != null)
        {
            <h5>Step 4: Fill in contract info</h5>
            <div class="form-group form-check">
              <input class="form-check-input" type="checkbox" @bind="addContractNumber">
              <label class="form-check-label" for="flexCheckDefault">
                Add contract number
              </label>
            </div>
            @if (addContractNumber)
            {
                <div class="form-group">
                    <label>Contract Number</label>
                    <input @bind="@selectedContract.Number" class="form-control">
                </div>
            }
            <div class="form-group form-check">
              <input class="form-check-input" type="checkbox" @bind="addContractDate" @onclick="SetContractDateToToday">
              <label class="form-check-label" for="flexCheckDefault">
                Add contract date
              </label>
            </div>
            @if (addContractDate)
            {
                <div class="form-group">
                    <label>Contract Date</label>
                    <input @bind="@selectedContract.Date" class="form-control">
                </div>
            }
            @foreach(var field in selectedContract.Fields)
            {
                <div class="form-group">
                    <label>@field.Name</label>
                    <input placeholder="@field.Placeholder" @bind="@field.Content" class="form-control">
                </div>
            }
            <div class="mb-4"></div>
        }

        @if(selectedContract != null && selectedContract.Fields.All(f=>f.Content != "")){
            <h5>Step 5: Generate the contract</h5>
            <div class="alert alert-primary" role="alert">
                By clicking <kbd>Preview Contract</kbd> you will be presented with the contract. After the document loads, press <kbd>Export Contract</kbd> to save as PDF.
            </div>
            <button type="button" @onclick="PreviewContract" class="btn btn-primary">Preview contract</button>
            @if (previewedContract)
            {
                <button type="button" @onclick="ExportContract" class="btn btn-primary mx-1">Export contract</button>
            
            }
        }
    </div>
    @if (previewedContract)
    {
        <div class="col-md-6">
            <h5>Document Preview</h5>
            <div class="alert alert-secondary" role="alert">
                You may edit the document by clicking into the text
            </div>
            <iframe id="pdfPreviewFrame" src="" style="width:100%; height:80vh;"></iframe>
        </div>
    }
</div>

@code {
    private List<Company> companies;
    private Company selectedCompany;
    private List<Conference> conferences;
    private Conference selectedConference;
    private List<Contract> contracts;
    private Contract selectedContract;
    private bool previewedContract = false;

    private bool addContractNumber = false;
    private bool addContractDate = false;

    protected override async Task OnInitializedAsync()
    {
        companies = await localStorage.GetItemAsync<List<Company>>("TemplateCompanies");
        conferences = await localStorage.GetItemAsync<List<Conference>>("TemplateConferences");
        contracts = await localStorage.GetItemAsync<List<Contract>>("TemplateContracts");

        if (companies == null && conferences == null && contracts == null)
            await UpdateDB();
    }

    void OnSelectCompany(ChangeEventArgs e)
    {
        selectedCompany = companies.Find(c => c.Name == e.Value.ToString());
        selectedConference = null;
        selectedContract = null;
    }

    void OnSelectConference(ChangeEventArgs e)
    {
        selectedConference = conferences.Find(c => c.Name == e.Value.ToString());
        selectedContract = null;
    }

    void OnSelectContract(ChangeEventArgs e)
    {
        selectedContract = contracts.Find(c => c.FriendlyName == e.Value.ToString());
    }

    async Task PreviewContract()
    {
        previewedContract = true;

        if (!addContractNumber)
            selectedContract.Number = "________";
        if (!addContractDate)
            selectedContract.Date = "________________";

        ContractBundle cb = new ContractBundle();
        cb.Company = selectedCompany;
        cb.Conference = selectedConference;
        cb.Contract = selectedContract;
        cb.CreatedAt = DateTime.Now;
        await localStorage.SetItemAsync("SelectedContractBundle", cb);

        List<ContractBundle> cblist = await localStorage.GetItemAsync<List<ContractBundle>>("ContractBundles");
        if (cblist == null)
            cblist = new List<ContractBundle>();
        cblist.Add(cb);
        await localStorage.SetItemAsync("ContractBundles", cblist);

        //await JS.InvokeVoidAsync("open", "/ExportContract", "_blank");
        await JS.InvokeVoidAsync("setIFrame", "pdfPreviewFrame", "/ExportContract");
    }

    async Task ExportContract()
    {
        await JS.InvokeVoidAsync("saveIFrameAsPDF", "pdfPreviewFrame", selectedConference.Name + " " + selectedContract.FriendlyName + ".pdf");
    }

    async Task UpdateDB()
    {
        companies = await Http.GetFromJsonAsync<List<Company>>("Data/companies.json?time=" + DateTime.Now);
        conferences = await Http.GetFromJsonAsync<List<Conference>>("Data/conferences.json?time=" + DateTime.Now);
        contracts = await Http.GetFromJsonAsync<List<Contract>>("Data/contracts.json?time=" + DateTime.Now);
        AppInfo appInfo = await Http.GetFromJsonAsync<AppInfo>("Data/appInfo.json?time=" + DateTime.Now);

        await localStorage.SetItemAsync("TemplateCompanies", companies);
        await localStorage.SetItemAsync("TemplateConferences", conferences);
        await localStorage.SetItemAsync("TemplateContracts", contracts);
        await localStorage.SetItemAsync("TemplateAppInfo", appInfo);

        selectedCompany = null;
        selectedConference = null;
        selectedContract = null;
    }

    async Task SetContractDateToToday()
    {
        selectedContract.Date = DateTime.Today.ToString("yyyy MMMM dd");
    }
}