@page "/Settings"
@using ContractGenerator.Models
@inject HttpClient Http
@using System.Text.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS
@inject NavigationManager Nav
@using System.Text
@inject Blazor.Analytics.IAnalytics Analytics

<PageTitle>Settings</PageTitle>
<h1>Settings</h1>
<hr />

<div class="row">
    <div class="col-md-4">
        <h5>App Info</h5>
        <hr/>
        @if (appInfoLocal == null)
        {
            <div class="alert alert-primary" role="alert">
                Loading...
            </div>
        }
        else
        {
            <table class="table">
                <thead>
                        <th>Component</th>
                        <th>Latest version</th>
                        <th>Local version</th>
                </thead>
                <tbody>
                    <tr>
                        <td>Company Version</td>
                        <td>@appInfoLatest.CompaniesVersion</td>
                        <td>@appInfoLocal.CompaniesVersion</td>
                    </tr>
                    <tr>
                        <td>Conference Version</td>
                        <td>@appInfoLatest.ConferencesVersion</td>
                        <td>@appInfoLocal.ConferencesVersion</td>
                    </tr><tr>
                        <td>Contract Version</td>
                        <td>@appInfoLatest.ContractsVersion</td>
                        <td>@appInfoLocal.ContractsVersion</td>
                    </tr>
                </tbody>
            </table>
        }
    </div>
    <div class="col-md-4">
        <h5>Manage data</h5>
        <hr />
        <button type="button" class="btn btn-secondary m-1" @onclick="UpdateDB">Get latest templates from server</button>
        <button type="button" class="btn btn-danger m-1" @onclick="ClearHistory">Clear history and templates</button>
		<button type="button" class="btn btn-danger m-1" @onclick="ClearSW">Clear service worker</button>
    </div>
    <div class="col-md-4">
        <h5>Export data</h5>
        <hr />
        <button type="button" class="btn btn-primary m-1" @onclick='() => ExportTemplates("Companies")'>companies.json</button>
        <button type="button" class="btn btn-primary m-1" @onclick='() => ExportTemplates("Conferences")'>conferences.json</button>
		<button type="button" class="btn btn-primary m-1" @onclick='() => ExportTemplates("Contracts")'>contracts.json</button>
    </div>
</div>


@code {
    private AppInfo appInfoLatest;
    private AppInfo appInfoLocal;

    protected override async Task OnInitializedAsync()
    {
        appInfoLatest = await Http.GetFromJsonAsync<AppInfo>("Data/appInfo.json?time=" + DateTime.Now);
        appInfoLocal = await localStorage.GetItemAsync<AppInfo>("TemplateAppInfo");

        if (appInfoLocal == null)
            await UpdateDB();

        await Analytics.TrackEvent("[Settings] Initialized Settings");
    }

    async Task ClearHistory()
    {
        await localStorage.ClearAsync();

        Nav.NavigateTo("/");

        await Analytics.TrackEvent("[Settings] Cleared history");
    }

    async Task ClearSW()
    {
        await JS.InvokeVoidAsync("forceUnregisterSW");

        Nav.NavigateTo("/");

        await Analytics.TrackEvent("[Settings] Cleared service worker");
    }

    async Task UpdateDB()
    {
        await localStorage.SetItemAsync("TemplateCompanies", await Http.GetFromJsonAsync<List<Company>>("Data/companies.json?time=" + DateTime.Now));
        await localStorage.SetItemAsync("TemplateConferences", await Http.GetFromJsonAsync<List<Conference>>("Data/conferences.json?time=" + DateTime.Now));
        await localStorage.SetItemAsync("TemplateContracts", await Http.GetFromJsonAsync<List<Contract>>("Data/contracts.json?time=" + DateTime.Now));
        await localStorage.SetItemAsync("TemplateAppInfo", await Http.GetFromJsonAsync<AppInfo>("Data/appInfo.json?time=" + DateTime.Now));

        Nav.NavigateTo("/");

        await Analytics.TrackEvent("[Settings] Updated database");
    }

    async Task ExportTemplates(string type)
    {
        JsonSerializerOptions jso = new JsonSerializerOptions();
        jso.WriteIndented = true;
        jso.Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping;

        await JS.InvokeVoidAsync("saveFile",
                            type.ToLower() + ".json",
                            JsonSerializer.Serialize(await localStorage.GetItemAsStringAsync("Template" + type), jso).Replace("\\\"","\"").Trim('"')
                        );

        await Analytics.TrackEvent("[Settings] Exported template",type);
    }
}