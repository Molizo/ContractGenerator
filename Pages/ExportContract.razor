@page "/ExportContract"
@layout EmptyLayout
@using ContractGenerator.Models;
@using System.Reflection
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS

@if(company != null && conference != null && contract != null)
{
    <section class="container-fluid mt-3 mb-5">
            <div class="row">
                <div class="col-2">
                    <img src="@conference.LogoFilePath" class="mx-auto d-block w-100">
                </div>
                <div class="col-8 text-center border border-2 border-dark">
                    <p>
                        <b>@company.Name</b>
                        <br/>
                        @company.Address
                        <br/>
                        CIF: @company.CIF
                        <br/>
                        IBAN: @company.IBAN @company.BankName
                        <br/>
                        SWIFT Code: @company.SWIFT
                        <br/>
                        @company.OtherInfoHeader
                    </p>
                </div>
                <div class="col-2">
                    <img src="@conference.LogoFilePath" class="mx-auto d-block w-100">
                </div>
            </div>
        </section>
        <section class="container-fluid">
            <div class="row">
                <div class="col-12 text-center mb-5">
                    <b>
                        <u>@contract.Name.ToUpper()</u>
                        <br/>
                        Nr. @contract.Number/@contract.Date
                    </b>
                </div>
            </div>
        </section>
    @foreach(var clause in contract.Clauses)
    {
        <section class="container-fluid mb-3">
            <div class="row">
                <div class="col-12 text-justify mb-1">
                    <b>@clause.Name</b>
                </div>
                <div class="col-12 text-justify">
                    @ReplaceFields(clause.Content)
                </div>
            </div>
        </section>
    }
}

@code {
    public Company company { get; set; }
    public Conference conference { get; set; }
    public Contract contract { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ContractBundle cb = await localStorage.GetItemAsync<ContractBundle>("SelectedContractBundle");
        company = cb.Company;
        conference = cb.Conference;
        contract = cb.Contract;

        List<PropertyInfo> companyProperties = company.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(company) != null).ToList();
        @foreach(var p in companyProperties)
        {
            ContractField f = new ContractField();
            f.Name = "Company" + p.Name;
            f.Content = p.GetValue(company).ToString();
            @if (contract.Fields == null)
                contract.Fields = new List<ContractField>();
            contract.Fields.Add(f);
        }

        List<PropertyInfo> conferenceProperties = conference.GetType().GetProperties(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(prop => prop.GetValue(conference) != null).ToList();
        @foreach(var p in conferenceProperties)
        {
            ContractField f = new ContractField();
            f.Name = "Conference" + p.Name;
            f.Content = p.GetValue(conference).ToString();
            @if (contract.Fields == null)
                contract.Fields = new List<ContractField>();
            contract.Fields.Add(f);
        }

        var ContractDateField = new ContractField();
        ContractDateField.Name = "ContractDate";
        ContractDateField.Content = contract.Date;
        contract.Fields.Add(ContractDateField);

        var ContractNumberField = new ContractField();
        ContractNumberField.Name = "ContractNumber";
        ContractNumberField.Content = contract.Number;
        contract.Fields.Add(ContractNumberField);
    }

    string ReplaceFields(string content)
    {
        @foreach(var field in contract.Fields)
        {
            content = content.Replace("{" + field.Name + "}", field.Content);
        }
        return content;
    }
}