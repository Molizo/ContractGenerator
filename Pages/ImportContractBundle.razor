@page "/ImportContractBundle"
@using ContractGenerator.Models
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JS
@inject Blazor.Analytics.IAnalytics Analytics
@inject IDialogService DialogService
@using System.Text.Json;
@using System.Text.Json.Serialization;

<PageTitle>Import Contract Bundle</PageTitle>

<MudText Typo="Typo.h3">Import Contract Bundle</MudText>

<InputFile id="fileInput" OnChange="UploadFiles" hidden multiple accept=".cb"/>

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput">
    Upload Files
</MudButton>

@if (files != null)
{
    <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
    <MudList>
    @foreach (var file in files)
    {
     <MudListItem Icon="@Icons.Filled.Attachment" @key="@file">
         @file.Name 
     </MudListItem>
    }
    </MudList>
}

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           OnClick="ProcessFiles">
    Process files
</MudButton>

@if (cbimported.Count > 0)
{
    <MudTable Class="my-5" Items="@cbimported" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Imported contracts</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Created at</MudTh>
        <MudTh>Conference</MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Contract type</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Created at">@context.CreatedAt</MudTd>
        <MudTd DataLabel="Conference">@context.Conference.Name</MudTd>
        <MudTd DataLabel="Company">@context.Company.Name</MudTd>
        <MudTd DataLabel="Contract type">@context.Contract.FriendlyName</MudTd>
        <MudTd DataLabel="Actions"><MudButton Variant="Variant.Filled" @onclick="() => ViewContract(context.CreatedAt)">View</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable> 
}


@code {
    IList<IBrowserFile> files = new List<IBrowserFile>();
    List<ContractBundle> cbimported = new List<ContractBundle>();

    protected override async Task OnInitializedAsync()
    {
        await Analytics.TrackEvent("[ImportContractBundle] Initialized Import Contract Bundle");
    }

    private void UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }
    }

    private async void ProcessFiles()
    {
        foreach(var file in files)
        {
            string fileContent = null;
            using (var reader = new StreamReader(file.OpenReadStream()))
            {
                fileContent = await reader.ReadToEndAsync();
            }
            var cb = JsonSerializer.Deserialize<ContractBundle>(fileContent);
            cb.CreatedAt = DateTime.Now;
            cbimported.Add(cb);
        }

        this.StateHasChanged();

        var cblist = await localStorage.GetItemAsync<List<ContractBundle>>("ContractBundles");
        if (cblist == null)
            cblist = new List<ContractBundle>();
        cblist.AddRange(cbimported);
        cblist = cblist.OrderByDescending(c => c.CreatedAt).ToList();
        await localStorage.SetItemAsync("ContractBundles", cblist);
    }

    async Task ViewContract(DateTime CreatedAt)
    {
        ContractBundle cb = cbimported.Find(c => c.CreatedAt == CreatedAt);

        var param = new DialogParameters();
        param.Add("cb", cb);
        DialogService.Show<ExportContract>("Preview contract",param);
        
        await Analytics.TrackEvent("[Index] Viewed saved contract");
    }
}
